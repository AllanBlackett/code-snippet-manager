{"version":3,"sources":["sidebar/styles.js","sidebarElement/styles.js","sidebarElement/SbElement.js","helpers.js","sidebar/Sidebar.js","editor/styles.js","editor/Editor.js","App.js","serviceWorker.js","index.js"],"names":["styles","theme","root","backgroundColor","palette","background","paper","height","position","left","width","boxShadow","newChatBtn","borderRadius","unreadMessage","color","top","right","newNoteBtn","borderBottom","sidebarContainer","marginTop","boxSizing","float","overflowY","overflowX","newNoteInput","margin","outline","border","paddingLeft","newNoteSubmitBtn","listItem","cursor","textSection","maxWidth","deleteIcon","SidebarElementComponent","selectSnippet","n","i","props","deleteSnippet","snippet","window","confirm","title","str","this","_index","_snippet","classes","selectedSnippetIndex","key","ListItem","className","selected","alignItems","onClick","ListItemText","primary","secondary","body","substring","replace","Component","withStyles","SidebarComponent","newSnippetBtnClick","setState","addingSnippet","state","updateTitle","txt","newSnippet","snippets","Button","newSnippetBtn","type","newSnippetInput","placeholder","onKeyUp","e","target","value","newSnippetSubmitBtn","List","map","Divider","titleInput","padding","fontSize","editIcon","editorContainer","EditorComponent","componentDidMount","text","selectedSnippet","id","componentDidUpdate","updateBody","val","a","update","b","c","d","h","apply","f","g","arguments","clearTimeout","setTimeout","debounce","snippetUpdate","onChange","firebase","require","App","firestore","collection","onSnapshot","serverUpdate","docs","_doc","data","console","log","index","snippetObj","doc","timestamp","FieldValue","serverTimestamp","add","newFromDB","newID","newSnippetIndex","indexOf","filter","snippetIndex","length","delete","Sidebar","Editor","Boolean","location","hostname","match","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7004a628.chunk.js","sourcesContent":["const styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: 'calc(100% - 35px)',\n    position: 'absolute',\n    left: '0',\n    width: '300px',\n    boxShadow: '0px 0px 2px black'\n  },\n  newChatBtn: {\n    borderRadius: '0px'\n  },\n  unreadMessage: {\n    color: 'red',\n    position: 'absolute',\n    top: '0',\n    right: '5px'\n  },\n  newNoteBtn: {\n    width: '100%',\n    height: '35px',\n    borderBottom: '1px solid black',\n    borderRadius: '0px',\n    backgroundColor: '#29487d',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: '#88a2ce'\n    }\n  },\n  sidebarContainer: {\n    marginTop: '0px',\n    width: '300px',\n    height: '100%',\n    boxSizing: 'border-box',\n    float: 'left',\n    overflowY: 'scroll',\n    overflowX: 'hidden'\n  },\n  newNoteInput: {\n    width: '100%',\n    margin: '0px',\n    height: '35px',\n    outline: 'none',\n    border: 'none',\n    paddingLeft: '5px',\n    '&:focus': {\n      outline: '2px solid rgba(81, 203, 238, 1)'\n    }\n  },\n  newNoteSubmitBtn: {\n    width: '100%',\n    backgroundColor: '#28787c',\n    borderRadius: '0px',\n    color: 'white'\n  }\n});\n\nexport default styles;","const styles = theme => ({\n  listItem: {\n    cursor: 'pointer'\n  },\n  textSection: {\n    maxWidth: '85%'\n  },  \n  deleteIcon: {\n    position: 'absolute',\n    right: '5px',\n    top: 'calc(50% - 15px)',\n    '&:hover': {\n      color: 'red'\n    }\n  }\n});\n\nexport default styles;","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport { ListItemText } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { removeHTMLTags } from '../helpers';\n\nclass SidebarElementComponent extends Component {\n  render() {\n    \n    const { _index, _snippet, classes, selectedSnippetIndex } = this.props;\n\n    return(\n    <div key={_index}>\n      <ListItem\n        className={classes.listItem}\n        // If selected snippet index = true, then it will be higlighted\n        selected={selectedSnippetIndex === _index}\n        alignItems='flex-start'>  \n          <div \n            className={classes.textSection}\n            onClick={() => this.selectSnippet(_snippet, _index)}>\n              <ListItemText\n                primary={_snippet.title}\n                secondary={removeHTMLTags(_snippet.body.substring(0, 30)) + '...'}>\n              </ListItemText>\n            </div>\n            <DeleteIcon onClick={() => this.deleteSnippet(_snippet)}\n              className={classes.deleteIcon}>\n\n            </DeleteIcon>\n      </ListItem>\n    </div>\n    );\n  }\n  selectSnippet = (n, i) => this.props.selectSnippet(n, i);\n  deleteSnippet = (snippet) => {\n    //! To send a warning to the user if they want to delete the note\n    if(window.confirm(`Are you sure you want to delete: ${snippet.title}?`)) {\n      this.props.deleteSnippet(snippet);\n    }\n  }\n}\n\nexport default withStyles(styles)(SidebarElementComponent);","// the debounce() is helpful specifically for when we are typing inside the text editor, we're going to want to update the database live\n// we don't want to send a request every single time we type a letter. We'd want to wait for the user to stop typing for 2 seconds before we update the database so that we are not going insane on the database with all these calls.\n\n\nexport default function debounce(a,b,c){\n  var d,e;\n  return function(){\n    function h(){\n      d=null;\n      c||(e=a.apply(f,g));\n    }\n    var f=this,g=arguments;\n    return (clearTimeout(d),d=setTimeout(h,b),c&&!d&&(e=a.apply(f,g)),e)\n  }\n}\n\n// This function is going to be for the preview on the left sidebar whenever we delete a note it's going to remove the HTML.\n// The text editor library (quill) it displays it as actual HTML. \n// when we display the preview in the sidebar, we don't want to show the HTML tags.\n// the removeHTMLTags() function is going to be removing the HTML so we can just see the plain text previews\n \nexport function removeHTMLTags (str) {\n  return str.replace(/<[^>]*>?/gm, '');\n};","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\nimport List from '@material-ui/core/List';\nimport { Divider, Button } from '@material-ui/core';\nimport SidebarElementComponent from '../sidebarElement/SbElement';\n\nclass SidebarComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      addingSnippet: false,\n      title: null\n    };    \n  }\n  render() {\n\n    const { snippets, classes, selectedSnippetIndex } = this.props;\n    \n    // If notes is not null, then execute the return statement else, return an empty div.\n    if(snippets) {\n      return(\n        <div className={classes.sidebarContainer}>\n          <Button\n            onClick={this.newSnippetBtnClick}\n            //! When user clicks on 'new notes' change to 'cancel'\n            className={classes.newSnippetBtn}>{this.state.addingSnippet ? 'Cancel' : 'New snippet'}</Button>\n            {\n              this.state.addingSnippet ? \n              <div>\n                <input type= 'text'\n                className={classes.newSnippetInput}\n                placeholder='Enter Snippet title'\n                onKeyUp={(e) => this.updateTitle(e.target.value)}>\n                </input>\n                <Button \n                className={classes.newSnippetSubmitBtn}\n                onClick={this.newSnippet}>Submit Snippet</Button>\n              </div> :\n              null\n            }\n            <List>\n              {\n                snippets.map((_snippet, _index) => {\n                  return(\n                    <div key={_index}>\n                      <SidebarElementComponent\n                        _snippet={_snippet}\n                        _index={_index}\n                        selectedSnippetIndex={selectedSnippetIndex}\n                        selectSnippet={this.selectSnippet}\n                        deleteSnippet={this.deleteSnippet}>\n                      </SidebarElementComponent>\n                      <Divider></Divider>\n                    </div>\n                  )\n                })\n              }\n            </List>\n        </div>\n        );\n      } else {\n       return(<div></div>);\n     }\n  }\n  newSnippetBtnClick = () => {\n    // Whatever this.setState is, become the opposite (if true, become false. if false, become true)\n    this.setState({ title: null, addingSnippet: !this.state.addingSnippet });\n  }\n  updateTitle = (txt) => {\n    this.setState({ title: txt })\n  }\n  newSnippet = () => {\n    this.props.newSnippet(this.state.title);\n    this.setState({ title: null, addingSnippet: false });\n  }\n  selectSnippet = (n, i) => this.props.selectSnippet(n, i\n    );\n  deleteSnippet = (snippet) => this.props.deleteSnippet(snippet);\n\n} \n\nexport default withStyles(styles)(SidebarComponent);","const styles = theme => ({\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    height: 'calc(100% - 35px)',\n    position: 'absolute',\n    left: '0',\n    width: '300px',\n    boxShadow: '0px 0px 2px black'\n  },\n  titleInput: {\n    height: '50px',\n    boxSizing: 'border-box',\n    border: 'none',\n    padding: '5px',\n    fontSize: '24px',\n    width: 'calc(100% - 300px)',\n    backgroundColor: '#29487d',\n    color: 'white',\n    paddingLeft: '50px'\n  },\n  editIcon: {\n    position: 'absolute',\n    left: '310px',\n    top: '12px',\n    color: 'white',\n    width: '10',\n    height: '10'\n  },\n  editorContainer: {\n    height: '100%',\n    boxSizing: 'border-box',\n    color: 'white',\n  },\n  \n  \n});\n\nexport default styles;","import React, { Component } from 'react';\nimport ReactQuill from 'react-quill';\nimport debounce from '../helpers';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nclass EditorComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: '',\n      title: '',\n      id: ''\n    };   \n  }\n\n  // When componentDidMount is mounted, its going to set the state\n  componentDidMount = () => {\n    this.setState({\n      text: this.props.selectedSnippet.body,\n      title: this.props.selectedSnippet.title,\n      id: this.props.selectedSnippet.id\n    });\n  }\n\n  // If user selects different note, we want the react quill (Editor) to be able to update\n  componentDidUpdate = () => {\n    // If the id of the one snippet the user selected is different from the one that is displaying, then call this.setState() method again\n    if(this.props.selectedSnippet.id !== this.state.id) {\n      this.setState({\n        text: this.props.selectedSnippet.body,\n        title: this.props.selectedSnippet.title,\n        id: this.props.selectedSnippet.id\n      });\n    }\n  }\n\n  render() {\n    // Access to the classes variables from this.props\n    const { classes } = this.props;\n\n    return(\n      // Whatever the text: '', is from this.state object is going to be the value property of react-quill.\n      // this.updateBody is going to be a function that is going to be asyncronous\n        // that's going to set some state, and once the state updates, call the update function.   \n    <div className={classes.editorContainer}>\n      \n      <ReactQuill\n        value={this.state.text} \n        onChange={this.updateBody}>\n      </ReactQuill>\n    </div>\n    );\n  }\n\n  updateBody = async (val) => {\n    // Wait for the state to update\n    await this.setState({ text: val });\n    // once state is update then call the update() method\n    this.update();\n  };\n\n  updateBody = async (txt) => {\n    // Wait for the state to update\n    await this.setState({ text: txt });\n    // once state is updated then call the update() method\n    this.update();\n  };\n\n  //! Everytime a user types a letter or character, etc, it's going to keep making http request to the database. \n  // debounce() prevents the database from updating everytime the value changes to allow the app to be more efficient.\n  // debounce() wait for the user to stop typing for 1 1/2 secounds before the call to the database. \n  update = debounce(() => {\n    this.props.snippetUpdate(this.state.id, {\n      title: this.state.title,\n      body: this.state.text\n    })\n  }, 1500);\n}\n\nexport default withStyles(styles)(EditorComponent);","import React, { Component } from 'react';\nimport SidebarComponent from './sidebar/Sidebar';\nimport EditorComponent from './editor/Editor';\nimport './App.css';\n\nconst firebase = require('firebase');\n\nclass App extends Component {\n  constructor () {\n    super();\n    // Initial State\n    this.state = {\n      selectedSnippetIndex: null,\n      selectedSnippet: null,\n      snippets: null\n    }    \n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <SidebarComponent \n        // Adding props\n          selectedSnippetIndex={this.state.selectedSnippetIndex}\n          snippets={this.state.snippets}\n          deleteSnippet={this.deleteSnippet}\n          selectSnippet={this.selectSnippet}\n          newSnippet={this.newSnippet}></SidebarComponent>\n        {\n        //! Using if/else conditional operator  \n        //  When an element from the sidebar is selected, make the editor display\n          this.state.selectedSnippet ?\n          <EditorComponent selectedSnippet={this.state.selectedSnippet}\n          selectedSnippetIndex={this.state.selectedSnippet}\n          snippets={this.state.snippets}\n          snippetUpdate={this.snippetUpdate}></EditorComponent> :\n          null\n        }\n      </div>\n    );\n  }\n\n  //   \n  componentDidMount = () => {\n    // onSnapshot() is going to automatically gets called whenever the .collection('snippets') is updated inside firebase\n    // the function that I passed into onSnapshot() will get called as an argument  \n    firebase\n      .firestore()\n      .collection('snippets')\n      .onSnapshot(serverUpdate => {\n        const snippets = serverUpdate.docs.map(_doc => {\n          const data = _doc.data();\n          data['id'] = _doc.id;\n          return data;\n        });\n        console.log(snippets);\n        this.setState({ snippets: snippets });\n      });\n  }\n    \n  selectSnippet = (snippet, index) => this.setState({ selectedSnippetIndex: index, selectedSnippet: snippet });\n  snippetUpdate = (id, snippetObj) => {\n    firebase\n      .firestore()\n      .collection('snippets')\n      .doc(id)\n      .update({\n        title: snippetObj.title,\n        body: snippetObj.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      });\n  }\n  newSnippet = async (title) => {\n    const snippet = {\n      title: title,\n      body: ''\n    };\n    const newFromDB = await firebase\n      .firestore()\n      .collection('snippets')\n      .add({\n        title: snippet.title,\n        body: snippet.body,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      });\n      // When the user creates a new snippet, go into firebase and then update the currently selected snippet with the one the user just created\n    const newID = newFromDB.id;\n    await this.setState({ snippets: [...this.state.snippets, snippet] });\n    const newSnippetIndex = this.state.snippets.indexOf(this.state.snippets.filter(_snippet => _snippet.id === newID)[0]);\n    this.setState({ selectedSnippet: this.state.snippets[newSnippetIndex], selectedSnippetIndex: newSnippetIndex });\n  }\n\n  deleteSnippet = async (snippet) => {\n    const snippetIndex = this.state.snippets.indexOf(snippet);\n    await this.setState({ snippets: this.state.snippets.filter(_snippet => _snippet !== snippet) });\n    if(this.state.selectedSnippetIndex === snippetIndex) {\n      this.setState({ selectedSnippetIndex: null, selectedSnippet: null });\n    } else {\n      //! this.state.snippets.length >=1 ?\n\n      this.state.snippets.length > 1 ?\n      // When user delete snippet, deselect the snippet [-1] to prevent server errors.\n      this.selectSnippet(this.state.snippets[this.state.selectedSnippetIndex - 1], this.state.selectedSnippetIndex - 1) :\n      this.setState({ selectedSnippetIndex: null, selectedSnippet: null });\n    }\n\n    firebase\n      .firestore()\n      .collection('snippets')\n      .doc(snippet.id)\n      .delete();\n  }\n  }\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst firebase = require('firebase');\nrequire('firebase/firestore');\n        \n  firebase.initializeApp({   \n    apiKey: \"AIzaSyDwf5coJqzXgYbXY9JzYElmB_l86_a1GbA\",\t\n    authDomain: \"code-snippet-manager-8814b.firebaseapp.com\",\t   \n    databaseURL: \"https://code-snippet-manager-8814b.firebaseio.com\",\t\n    projectId: \"code-snippet-manager-8814b\",\t\n    storageBucket: \"code-snippet-manager-8814b.appspot.com\",\t\n    messagingSenderId: \"795530527968\",\t\n    appId: \"1:795530527968:web:53e4ebb9faac5b024f7c85\"\n  });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('csm-container')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}